@model List<QuestionDTO>

@{
    ViewData["Title"] = "Take Exam";
    var questionsJson = Json.Serialize(Model);
    ViewBag.studentid = ViewBag.studentid ?? 0;
    ViewBag.examid = ViewBag.examid ?? 0;
    // Calculate exam duration in seconds (difference between start and end)
    // Default to 60 minutes (3600 seconds) if not available
    var examDurationSeconds = 60 * 60; // Default value
    if (ViewBag.startexam != null && ViewBag.endexam != null)
    {
        examDurationSeconds = (int)(ViewBag.endexam - ViewBag.startexam).TotalSeconds;
    }
}

<div class="alert alert-info mt-3">
    ⏱ Time Remaining: <span id="timer">--:--</span>
    <span class="float-right">Answered: <span id="answered-count">0</span>/<span id="total-questions">@Model.Count</span></span>
</div>

<div id="exam-container">
    <h3 id="question-text"></h3>
    <ul id="choices-list" class="list-group mt-3"></ul>

    <div class="mt-4">
        <button id="prevBtn" class="btn btn-secondary" onclick="showPrevious()">Back</button>
        <button id="nextBtn" class="btn btn-primary" onclick="showNext()">Next</button>
    </div>

    <div class="mt-4">
        <button id="submitBtn" class="btn btn-success" onclick="submitExam()" disabled>Submit Exam</button>
    </div>
</div>

@section Scripts {
    <script>
        // Timer functionality
        let duration = @examDurationSeconds; // Using calculated duration or default
        const timerDisplay = document.getElementById("timer");
        const timerInterval = setInterval(updateTimer, 1000);

        // Question state management
        const questions = @Html.Raw(questionsJson);
        let currentIndex = 0;
        let examSubmitted = false;

        // Initialize answers in session storage if not exists
        if (!sessionStorage.getItem('answers')) {
            sessionStorage.setItem('answers', JSON.stringify({}));
        }

        // Initial question load
        showQuestion(currentIndex);
        updateAnsweredCount();

        // Prevent navigation away from exam page
        window.addEventListener('beforeunload', function(e) {
            if (!examSubmitted) {
                e.preventDefault();
                e.returnValue = 'Your exam progress will be submitted if you leave.';
                return e.returnValue;
            }
        });

        // Handle browser back button
        history.pushState(null, null, location.href);
        window.onpopstate = function(event) {
            if (!examSubmitted) {
                const confirmLeave = confirm("Going back will submit your exam with current answers. Are you sure?");
                if (confirmLeave) {
                    // Check if any answers exist
                    const answers = JSON.parse(sessionStorage.getItem('answers') || '{}');


                    const hasAnswers = Object.keys(answers).length > 0;

                    if (!hasAnswers) {
                        // If no answers, create a payload with null choiceIds
                        const payload = questions.map(q => ({
                            studentId: @ViewBag.studentid,
                            examId: @ViewBag.examid ?? 0,
                            questionId: q.quesId,
                            choiceId: null
                        }));

                        submitExamWithPayload(payload, true);
                    } else {
                        submitExam(true);
                    }
                } else {
                    history.pushState(null, null, location.href);
                }
            }
        };

        function updateTimer() {
            const minutes = Math.floor(duration / 60);
            const seconds = duration % 60;
            timerDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

            if (--duration < 0) {
                clearInterval(timerInterval);
                alert("Time is up! Auto-submitting exam.");
                submitExam(true);
            }
        }

        function showQuestion(index) {
            const q = questions[index];
            document.getElementById('question-text').innerText = `Q${index + 1}: ${q.quesText}`;

            const choiceList = document.getElementById('choices-list');
            choiceList.innerHTML = '';

            // Get saved answers
            const answers = JSON.parse(sessionStorage.getItem('answers') || '{}');
            const selectedChoiceId = answers[q.quesId];

            q.choices.forEach(choice => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.innerHTML = `
                    <label>
                        <input type="radio" name="q${q.quesId}" value="${choice.choiceId}"
                            onchange="handleAnswerChange(${q.quesId}, ${choice.choiceId})"
                            ${selectedChoiceId == choice.choiceId ? 'checked' : ''} />
                        ${choice.choiceText}
                    </label>`;
                choiceList.appendChild(li);
            });

            // Update navigation buttons
            document.getElementById('prevBtn').disabled = (index === 0);
            document.getElementById('nextBtn').disabled = (index === questions.length - 1);
        }

        function handleAnswerChange(quesId, choiceId) {
            const answers = JSON.parse(sessionStorage.getItem('answers') || '{}');
            answers[quesId] = choiceId;
            sessionStorage.setItem('answers', JSON.stringify(answers));
            updateAnsweredCount();
        }

        function updateAnsweredCount() {
            const answers = JSON.parse(sessionStorage.getItem('answers') || '{}');
            const answeredCount = questions.filter(q => answers[q.quesId]).length;
            document.getElementById('answered-count').textContent = answeredCount;
            document.getElementById('total-questions').textContent = questions.length;

            // Enable submit button only when all questions are answered
            document.getElementById('submitBtn').disabled = answeredCount !== questions.length;
        }

        function showNext() {
            if (currentIndex < questions.length - 1) {
                currentIndex++;
                showQuestion(currentIndex);
            }
        }

        function showPrevious() {
            if (currentIndex > 0) {
                currentIndex--;
                showQuestion(currentIndex);
            }
        }

                function submitExam(forceSubmit = false) {
            const answers = JSON.parse(sessionStorage.getItem('answers') || '{}');

            // Build payload - only include answered questions
            const payload = questions
                .filter(q => answers[q.quesId] != null) // Only answered questions
                .map(q => ({
                    studentId: @ViewBag.studentid,
                    examId: @ViewBag.examid ?? 0,
                    questionId: q.quesId,
                    choiceId: answers[q.quesId]
                }));

            // Case 1: No answers at all - call empty exam API
            if (payload.length === 0) {
                submitEmptyExam();
                return;
            }

            // Case 2: Some answers - call normal submit API
            submitExamWithPayload(payload, forceSubmit);
        }

        function submitExamWithPayload(payload, forceSubmit = false) {
            if (examSubmitted) return;

            examSubmitted = true;
            const submitBtn = document.getElementById('submitBtn');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerText = 'Submitting...';
            }

            fetch('/api/exam/submit-all', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) throw new Error('Submission failed');
                return res.json();
            })
            .then(data => {
                sessionStorage.removeItem('answers');
                alert(data.message || "Exam submitted successfully!");
                window.location.href = '/Home/Index';
            })
            .catch(err => {
                console.error("Error:", err);
                alert("An error occurred during submission. Please try again.");
                examSubmitted = false;
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerText = 'Submit Exam';
                }
            });
        }





        function submitEmptyExam() {
            if (examSubmitted) return;

            examSubmitted = true;
            const submitBtn = document.getElementById('submitBtn');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerText = 'Submitting...';
            }

            fetch('/api/exam/submit-empty', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    studentId: @ViewBag.studentid,
                    examId: @ViewBag.examid ?? 0
                })
            })
            .then(res => {
                if (!res.ok) throw new Error('Submission failed');
                return res.json();
            })
            .then(data => {
                sessionStorage.removeItem('answers');
                alert(data.message || "Exam submitted with score 0");
                window.location.href = '/Home/Index';
            })
            .catch(err => {
                console.error("Error:", err);
                alert("An error occurred during submission. Please try again.");
                examSubmitted = false;
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerText = 'Submit Exam';
                }
            });
        }



    </script>
}