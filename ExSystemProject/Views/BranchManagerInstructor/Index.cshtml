@model List<ExSystemProject.Models.Instructor>
@{
    ViewData["Title"] = ViewData["Title"] ?? "Instructor Management";
    Layout = "~/Views/Shared/_BranchManagerLayout.cshtml";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1>
                <i class="bi bi-people-fill"></i> Instructors in @ViewBag.BranchName
            </h1>
        </div>
        <div>
            <a asp-action="Create" class="btn btn-danger">
                <i class="bi bi-plus-circle"></i> Add New Instructor
            </a>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold">Filter Instructors</h6>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Track</label>
                    <select name="trackId" class="form-select">
                        <option value="">All Tracks</option>
                        @foreach (var track in ViewBag.Tracks)
                        {
                            if (track.Selected)
                            {
                                <option value="@track.Value" selected="selected">@track.Text</option>
                            }
                            else
                            {
                                <option value="@track.Value">@track.Text</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Status</label>
                    <select name="active" class="form-select">
                        <option value="">All Statuses</option>
                        @if (ViewBag.ActiveFilter == true)
                        {
                            <option value="true" selected="selected">Active</option>
                        }
                        else
                        {
                            <option value="true">Active</option>
                        }

                        @if (ViewBag.ActiveFilter == false)
                        {
                            <option value="false" selected="selected">Inactive</option>
                        }
                        else
                        {
                            <option value="false">Inactive</option>
                        }
                    </select>
                </div>

                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="bi bi-filter"></i> Filter
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-x-circle"></i> Clear
                    </a>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold">Instructor List</h6>
            <span class="badge bg-primary">Showing @Model.Count instructor(s)</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="instructorsTable">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Track</th>
                            <th>Salary</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Any())
                        {
                            @foreach (var instructor in Model)
                            {
                                <tr>
                                    <td>@instructor.User?.Username</td>
                                    <td>@instructor.User?.Email</td>
                                    <td>
                                        <span class="badge rounded-pill" style="background-color: var(--iti-blue);">
                                            <i class="bi bi-diagram-3 me-1"></i> @instructor.Track?.TrackName
                                        </span>
                                    </td>
                                    <td>$@instructor.Salary.Value.ToString("N2")</td>
                                    <td>
                                        <span class="status-badge badge @(instructor.Isactive == true ? "bg-success" : "bg-danger")"
                                              data-id="@instructor.InsId"
                                              data-status="@instructor.Isactive">
                                            <i class="bi @(instructor.Isactive == true ? "bi-check-circle me-1" : "bi-x-circle me-1")"></i>
                                            @(instructor.Isactive == true ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-1">
                                            <a asp-action="Details" asp-route-id="@instructor.InsId" class="btn btn-sm btn-info">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@instructor.InsId" class="btn btn-sm btn-warning">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <a asp-action="Courses" asp-route-id="@instructor.InsId" class="btn btn-sm btn-primary">
                                                <i class="bi bi-book"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-success toggle-status-btn"
                                                    data-id="@instructor.InsId"
                                                    data-current-status="@instructor.Isactive.ToString().ToLower()">
                                                <i class="bi bi-toggle-on"></i>
                                            </button>
                                            <a asp-action="Delete" asp-route-id="@instructor.InsId" class="btn btn-sm btn-danger">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                                        <p class="mt-2 mb-0">No instructors found matching your criteria.</p>
                                        <a asp-action="Create" class="btn btn-sm btn-primary mt-2">Add your first instructor</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // Display SweetAlert for TempData messages
        @if (TempData["Success"] != null)
        {
            <text>
                        Swal.fire({
                            title: "Success!",
                            text: "@TempData["Success"]",
                            icon: "success",
                            confirmButtonColor: "#a41e22"
                        });
            </text>
        }

        @if (TempData["Error"] != null)
        {
            <text>
                        Swal.fire({
                            title: "Error!",
                            text: "@TempData["Error"]",
                            icon: "error",
                            confirmButtonColor: "#a41e22"
                        });
            </text>
        }

            // Handle toggle status button click
            $('.toggle-status-btn').on('click', function () {
                const instructorId = $(this).data('id');
                // Get current status as a boolean, handling different string formats
                const currentStatusStr = $(this).data('current-status');
                const currentStatus = currentStatusStr === 'true' || currentStatusStr === true;
                const statusText = currentStatus ? 'deactivate' : 'activate';
                const button = $(this);

                Swal.fire({
                    title: 'Are you sure?',
                    text: `Do you want to ${statusText} this instructor?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, proceed!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        Swal.fire({
                            title: 'Processing...',
                            text: 'Updating instructor status',
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        // Send AJAX request to toggle status
                        $.ajax({
                            url: '@Url.Action("ToggleStatus")',
                            type: 'POST',
                            data: { id: instructorId },
                            success: function (result) {
                                if (result.success) {
                                    // Show success message
                                    Swal.fire({
                                        title: 'Success!',
                                        text: result.message,
                                        icon: 'success',
                                        timer: 1500,
                                        showConfirmButton: false
                                    });

                                    // Update UI
                                    const badge = $(`.status-badge[data-id="${instructorId}"]`);
                                    if (result.isActive) {
                                        badge.removeClass('bg-danger').addClass('bg-success');
                                        badge.html('<i class="bi bi-check-circle me-1"></i> Active');
                                    } else {
                                        badge.removeClass('bg-success').addClass('bg-danger');
                                        badge.html('<i class="bi bi-x-circle me-1"></i> Inactive');
                                    }

                                    // Update button data attribute
                                    button.data('current-status', result.isActive);
                                    button.attr('data-current-status', result.isActive.toString().toLowerCase());
                                } else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: result.message,
                                        icon: 'error',
                                        confirmButtonColor: '#a41e22'
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while updating the status.',
                                    icon: 'error',
                                    confirmButtonColor: '#a41e22'
                                });
                            }
                        });
                    }
                });
            });
        });
    </script>
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
}
