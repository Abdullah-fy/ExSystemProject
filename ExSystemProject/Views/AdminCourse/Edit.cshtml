@model ExSystemProject.DTOS.CourseDTO
@{
    ViewData["Title"] = "Edit Course";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Edit Course</h5>
    </div>
    <div class="card-body">
        <form asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CrsId" />

            <div class="mb-3">
                <label asp-for="CrsName" class="form-label">Course Name</label>
                <input asp-for="CrsName" class="form-control" required />
                <span asp-validation-for="CrsName" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="CrsPeriod" class="form-label">Duration (Hours)</label>
                <input asp-for="CrsPeriod" class="form-control" type="number" min="1" />
                <span asp-validation-for="CrsPeriod" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="BranchId" class="form-label">Branch</label>
                <select asp-for="BranchId" class="form-select" asp-items="ViewBag.Branches" id="branchSelect">
                    <option value="">-- Select Branch --</option>
                </select>
                <span asp-validation-for="BranchId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="TrackId" class="form-label">Track</label>
                <select asp-for="TrackId" class="form-select" asp-items="ViewBag.Tracks" id="trackSelect">
                    <option value="">-- Select Track --</option>
                </select>
                <span asp-validation-for="TrackId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Description" class="form-label">Description (Optional)</label>
                <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label class="form-label d-block">Status</label>
                <div class="form-check form-switch">
                    @{
                        // Convert nullable bool to non-nullable for the checkbox
                        bool isActiveValue = Model.Isactive ?? true;  // Default to true if null
                    }
                    <input type="checkbox" id="Isactive" name="Isactive" class="form-check-input"
                           checked="@isActiveValue" value="true" />
                    <label class="form-check-label" for="Isactive">
                        <span id="statusBadge" class="badge @(isActiveValue ? "bg-success" : "bg-danger")">
                            @(isActiveValue ? "Active" : "Inactive")
                        </span>
                    </label>
                </div>
            </div>

            <div class="d-flex justify-content-between">
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function() {
            // Update badge on toggle change
            $('#Isactive').change(function() {
                if ($(this).is(':checked')) {
                    $('#statusBadge').removeClass('bg-danger').addClass('bg-success').text('Active');
                } else {
                    $('#statusBadge').removeClass('bg-success').addClass('bg-danger').text('Inactive');
                }
            });

            // Add hidden field on form submit to properly handle the unchecked state
            $('form').submit(function() {
                // If checkbox is not checked, we need to add a hidden field with value 'false'
                if (!$('#Isactive').is(':checked')) {
                    $(this).append('<input type="hidden" name="Isactive" value="false" />');
                }
            });

            // Handle branch selection change
            $('#branchSelect').change(function() {
                var branchId = $(this).val();
                if (branchId) {
                    // Make AJAX request to get tracks for the selected branch
                    $.getJSON(`/AdminCourse/GetTracksByBranch/${branchId}`, function(tracks) {
                        // Clear and populate track dropdown
                        var trackSelect = $('#trackSelect');
                        trackSelect.empty();
                        trackSelect.append('<option value="">-- Select Track --</option>');
                        $.each(tracks, function(i, track) {
                            trackSelect.append($('<option></option>').val(track.trackId).text(track.trackName));
                        });
                    });
                } else {
                    // Clear track dropdown if no branch selected
                    $('#trackSelect').empty().append('<option value="">-- Select Track --</option>');
                }
            });
        });
    </script>
}
