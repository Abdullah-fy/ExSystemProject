@model ExSystemProject.DTOS.QuestionBankDTO
@{
    ViewData["Title"] = "Edit Question";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Edit Question</h5>
    </div>
    <div class="card-body">
        <form asp-action="Edit" method="post" id="questionForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="QuesId" />
            <input type="hidden" asp-for="QuesType" value="@Model.QuesType" />
            <input type="hidden" asp-for="Isactive" value="true" />

            <div class="mb-3">
                <label asp-for="ExamId" class="form-label">Exam</label>
                <select asp-for="ExamId" class="form-select" asp-items="ViewBag.Exams">
                    <option value="">-- Select Exam (Optional) --</option>
                </select>
                <span asp-validation-for="ExamId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="QuesText" class="form-label">Question Text</label>
                <textarea asp-for="QuesText" class="form-control" rows="3" required></textarea>
                <span asp-validation-for="QuesText" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label class="form-label">Question Type</label>
                <input type="text" class="form-control" value="@Model.QuesType" disabled />
                <small class="text-muted">Question type cannot be changed after creation.</small>
            </div>

            <div class="mb-3">
                <label asp-for="QuesScore" class="form-label">Score</label>
                <input asp-for="QuesScore" class="form-control" type="number" min="1" required />
                <span asp-validation-for="QuesScore" class="text-danger"></span>
            </div>

            <div id="choices">
                <h6>Choices</h6>
                <p class="text-muted">Edit choices for the question (at least 2 choices required, one must be marked as correct)</p>

                <div id="choicesContainer">
                    @if (Model.Choices != null)
                    {
                        @for (int i = 0; i < Model.Choices.Count; i++)
                        {
                            <div class="card mb-2 choice-item">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col">
                                            <input type="hidden" name="Choices[@i].ChoiceId" value="@Model.Choices[i].ChoiceId" />
                                            <div class="mb-2">
                                                <label class="form-label">Choice Text</label>
                                                <input type="text" name="Choices[@i].ChoiceText" class="form-control choice-text" value="@Model.Choices[i].ChoiceText" required />
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <div class="form-check">
                                                <input type="radio" name="correctChoice" value="@i" class="form-check-input correct-choice" @(Model.Choices[i].IsCorrect ? "checked" : "") />
                                                <input type="hidden" name="Choices[@i].IsCorrect" class="is-correct-input" value="@(Model.Choices[i].IsCorrect ? "true" : "false")" />
                                                <label class="form-check-label">Correct Answer</label>
                                            </div>
                                        </div>
                                        @if (Model.QuesType == "MCQ" && Model.Choices.Count > 2)
                                        {
                                            <div class="col-auto">
                                                <button type="button" class="btn btn-sm btn-outline-danger remove-choice">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                @if (Model.QuesType == "MCQ")
                {
                    <button type="button" id="addChoice" class="btn btn-outline-primary mt-2">
                        <i class="bi bi-plus"></i> Add Choice
                    </button>
                }
            </div>

            <div class="d-flex justify-content-between mt-4">
                <a asp-action="Index" asp-route-examId="@Model.ExamId" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function() {
            // Handle correct choice selection
            $('.correct-choice').change(function() {
                $('.is-correct-input').val('false');
                $(this).closest('.choice-item').find('.is-correct-input').val('true');
            });

            // Add new choice
            let choiceIndex = @(Model.Choices != null ? Model.Choices.Count : 0);
            $('#addChoice').click(function() {
                let newChoice = `
                    <div class="card mb-2 choice-item">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <input type="hidden" name="Choices[${choiceIndex}].ChoiceId" value="0" />
                                    <div class="mb-2">
                                        <label class="form-label">Choice Text</label>
                                        <input type="text" name="Choices[${choiceIndex}].ChoiceText" class="form-control choice-text" required />
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="form-check">
                                        <input type="radio" name="correctChoice" value="${choiceIndex}" class="form-check-input correct-choice" />
                                        <input type="hidden" name="Choices[${choiceIndex}].IsCorrect" class="is-correct-input" value="false" />
                                        <label class="form-check-label">Correct Answer</label>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-sm btn-outline-danger remove-choice">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                $('#choicesContainer').append(newChoice);
                choiceIndex++;

                // Re-bind events
                $('.correct-choice').off('change').change(function() {
                    $('.is-correct-input').val('false');
                    $(this).closest('.choice-item').find('.is-correct-input').val('true');
                });

                $('.remove-choice').off('click').click(function() {
                    $(this).closest('.choice-item').remove();
                });
            });

            // Remove choice
            $('.remove-choice').click(function() {
                if ($('.choice-item').length > 2) {
                    $(this).closest('.choice-item').remove();
                } else {
                    alert('MCQ questions must have at least 2 choices.');
                }
            });

            // Form submission validation
            $('#questionForm').submit(function(e) {
                // Validate has at least 2 choices with text
                let validChoices = 0;
                $('.choice-text').each(function() {
                    if ($(this).val().trim() !== '') {
                        validChoices++;
                    }
                });

                if (@(Model.QuesType == "MCQ" ? "true" : "false") && validChoices < 2) {
                    alert('MCQ questions must have at least 2 valid choices.');
                    e.preventDefault();
                    return false;
                }

                // Validate at least one choice is marked correct
                if ($('.is-correct-input[value="true"]').length === 0) {
                    alert('At least one choice must be marked as correct.');
                    e.preventDefault();
                    return false;
                }
            });
        });
    </script>
}
