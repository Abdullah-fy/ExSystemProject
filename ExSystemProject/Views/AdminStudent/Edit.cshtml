@model ExSystemProject.DTOS.StudentDTO
@{
    ViewData["Title"] = "Edit Student";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="card shadow">
    <div class="card-header d-flex justify-content-between align-items-center bg-white py-3">
        <h5 class="mb-0 text-primary">Edit Student</h5>
        <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>
    <div class="card-body p-4">
        <form asp-action="Edit" method="post" id="editStudentForm">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <!-- Essential hidden fields -->
            <input type="hidden" asp-for="StudentId" />
            <input type="hidden" asp-for="UserId" />

            <!-- Add hidden fields for TrackName and BranchName -->
            <input type="hidden" asp-for="TrackName" id="hiddenTrackName" value="@Model.TrackName" />
            <input type="hidden" asp-for="BranchName" id="hiddenBranchName" value="@Model.BranchName" />

            <!-- Hidden field to store Isactive value from checkbox -->
            <input type="hidden" name="IsactiveHidden" id="IsactiveHidden" value="@(Model.Isactive.HasValue && Model.Isactive.Value ? "True" : "False")" />

            <div class="row mb-3">
                <div class="col-md-6">
                    <h6 class="border-bottom pb-2 mb-3">User Information</h6>

                    <div class="mb-3">
                        <label asp-for="Username" class="form-label">Username <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-person"></i></span>
                            <input asp-for="Username" class="form-control" required />
                        </div>
                        <span asp-validation-for="Username" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Email" class="form-label">Email <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                            <input asp-for="Email" class="form-control" type="email" required />
                        </div>
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Gender <span class="text-danger">*</span></label>
                        <div>
                            @{
                                bool isMale = Model.Gender == "M";
                                bool isFemale = Model.Gender == "F";
                            }
                            <div class="form-check form-check-inline">
                                <input asp-for="Gender" class="form-check-input" type="radio" value="M" id="genderMale" checked="@isMale" />
                                <label class="form-check-label" for="genderMale">Male</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input asp-for="Gender" class="form-check-input" type="radio" value="F" id="genderFemale" checked="@isFemale" />
                                <label class="form-check-label" for="genderFemale">Female</label>
                            </div>
                        </div>
                        <span asp-validation-for="Gender" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-6">
                    <h6 class="border-bottom pb-2 mb-3">Academic Information</h6>

                    <div class="mb-3">
                        <label for="BranchId" class="form-label">Branch</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-building"></i></span>
                            <select id="BranchId" name="BranchId" class="form-select">
                                @foreach (var branch in ViewBag.Branches)
                                {
                                    if (branch.BranchId == Model.BranchId)
                                    {
                                        <option value="@branch.BranchId" selected>@branch.BranchName</option>
                                    }
                                    else
                                    {
                                        <option value="@branch.BranchId">@branch.BranchName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="TrackId" class="form-label">Track <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-signpost"></i></span>
                            <select asp-for="TrackId" id="TrackId" class="form-select" required>
                                <!-- Will be populated via JavaScript -->
                            </select>
                        </div>
                        <span asp-validation-for="TrackId" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="EnrollmentDate" class="form-label">Enrollment Date</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                            <input asp-for="EnrollmentDate" class="form-control" type="text" readonly />
                        </div>
                        <small class="form-text text-muted">Enrollment date cannot be changed.</small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Account Status</label>
                        <div class="form-check form-switch">
                            @{
                                bool isActiveValue = Model.Isactive.HasValue && Model.Isactive.Value;
                            }
                            <input type="checkbox" class="form-check-input" id="IsactiveCheckbox"
                            @(isActiveValue ? "checked" : "") />
                            <label class="form-check-label" for="IsactiveCheckbox">
                                <span id="activeStatusLabel" class="@(isActiveValue ? "text-success" : "text-danger")">
                                    @(isActiveValue ? "Active" : "Inactive")
                                </span>
                            </label>
                        </div>
                        <small class="form-text text-muted">Deactivating a student will affect related records.</small>
                    </div>
                </div>
            </div>

            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                <a asp-action="Details" asp-route-id="@Model.StudentId" class="btn btn-outline-secondary">
                    <i class="bi bi-x-lg"></i> Cancel
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            console.log("Edit form initialized");

            // Store current values for debugging
            var currentBranchId = $('#BranchId').val();
            var currentTrackId = '@Model.TrackId';
            var currentTrackName = '@Model.TrackName';
            var currentBranchName = '@Model.BranchName';
            var currentIsActive = @(Json.Serialize(Model.Isactive.HasValue && Model.Isactive.Value));

            console.log("Initial values:", {
                branchId: currentBranchId,
                trackId: currentTrackId,
                trackName: currentTrackName,
                branchName: currentBranchName,
                isActive: currentIsActive
            });

            // Update hidden fields with current values
            $('#hiddenTrackName').val(currentTrackName);
            $('#hiddenBranchName').val(currentBranchName);

            // Handle status checkbox change
            $('#IsactiveCheckbox').on('change', function() {
                var isChecked = $(this).is(':checked');
                console.log("Status checkbox changed to:", isChecked);

                // Update label style
                $('#activeStatusLabel')
                    .removeClass(isChecked ? 'text-danger' : 'text-success')
                    .addClass(isChecked ? 'text-success' : 'text-danger')
                    .text(isChecked ? 'Active' : 'Inactive');

                // Set hidden field for form submission
                $('#IsactiveHidden').val(isChecked ? 'True' : 'False');
            });

            // Load tracks for a branch
            function loadTracksForBranch(branchId, selectedTrackId) {
                if (!branchId) return;

                console.log("Loading tracks for branch:", branchId);
                $('#TrackId').prop('disabled', true);
                $('#TrackId').html('<option value="">-- Loading Tracks... --</option>');

                $.ajax({
                    url: '/AdminStudent/GetTracksByBranch',
                    type: 'GET',
                    data: { branchId: branchId },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        console.log("Tracks loaded:", data);
                        $('#TrackId').empty();

                        if (data && data.length > 0) {
                            $.each(data, function(i, track) {
                                var selected = (track.trackId.toString() === selectedTrackId.toString());
                                var option = $('<option></option>')
                                    .val(track.trackId)
                                    .text(track.trackName);

                                if (selected) {
                                    option.prop('selected', true);
                                    $('#hiddenTrackName').val(track.trackName);
                                }

                                $('#TrackId').append(option);
                            });
                            console.log("Track dropdown populated, selected track:", selectedTrackId);
                        } else {
                            $('#TrackId').append('<option value="">-- No tracks available --</option>');
                        }

                        $('#TrackId').prop('disabled', false);
                    },
                    error: function(xhr, status, error) {
                        console.error("AJAX Error:", error);
                        $('#TrackId').html('<option value="">-- Error loading tracks --</option>');
                        $('#TrackId').prop('disabled', false);
                    }
                });
            }

            // Handle branch changes
            $('#BranchId').on('change', function() {
                var branchId = $(this).val();
                var branchName = $(this).find("option:selected").text();
                console.log("Branch changed to:", branchId, branchName);

                // Update hidden branch name field
                $('#hiddenBranchName').val(branchName);

                // Load tracks for this branch
                loadTracksForBranch(branchId, '');  // No selected track when branch changes
            });

            // Track selection change handler
            $('#TrackId').on('change', function() {
                var trackName = $(this).find("option:selected").text();
                $('#hiddenTrackName').val(trackName);
                console.log("Selected track:", $(this).val(), "Track name:", trackName);
            });

            // Form validation before submit
            $('#editStudentForm').on('submit', function(e) {
                console.log("Form submitting");

                // Collect current values
                var branchId = $('#BranchId').val();
                var trackId = $('#TrackId').val();
                var branchName = $('#BranchId option:selected').text();
                var trackName = $('#TrackId option:selected').text();
                var isActive = $('#IsactiveCheckbox').is(':checked');

                // Update hidden fields
                $('#hiddenBranchName').val(branchName);
                $('#hiddenTrackName').val(trackName);
                $('#IsactiveHidden').val(isActive ? 'True' : 'False');

                console.log("Form submission values:", {
                    branchId: branchId,
                    trackId: trackId,
                    branchName: branchName,
                    trackName: trackName,
                    isActive: isActive
                });

                if (!trackId) {
                    e.preventDefault();
                    alert('Please select a track');
                    return false;
                }

                // Form is valid, continue
                return true;
            });

            // Load initial tracks on page load
            if (currentBranchId) {
                console.log("Loading initial tracks for branch:", currentBranchId);
                loadTracksForBranch(currentBranchId, currentTrackId);
            }
        });
    </script>
}